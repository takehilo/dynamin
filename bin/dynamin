#!/usr/bin/env node

'use strict'

const dynamin = require('../lib')
const chalk = require('chalk')
const ConfigStore = require('configstore')
const yargs = require('yargs')
const pkg = require('../package.json')
const ora = require('ora')

const conf = new ConfigStore(pkg.name)

const argv = yargs
  .options('t', {
    alias: 'table',
    conflicts: ['tags', 'restore'],
    describe: 'Table name',
    type: 'string'
  })
  .options('tags', {
    coerce: parseTags,
    conflicts: ['t', 'restore'],
    describe: 'Lists of tags (keys and values)',
    type: 'array'
  })
  .options('restore', {
    conflicts: ['t', 'tags'],
    default: undefined,
    describe: 'Restores capacity units',
    type: 'boolean'
  })
  .options('r', {
    alias: 'region',
    demandOption: true,
    describe: 'AWS region',
    type: 'string'
  })
  .options('p', {
    alias: 'profile',
    describe: 'Profile name in your credential file',
    type: 'string'
  })
  .check(check)
  .argv

function parseTags (tags) {
  return tags.map(t => {
    t = t.split(',')
    const key = t[0].split('=')[1]
    const values = t.slice(1).join(',').split('=')[1].split(',')
    return {key, values}
  })
}

function check (argv) {
  if (!argv.t && !argv.tags && !argv.restore) {
    throw new Error('t, tags or restore must be specified')
  }

  return true
}

function minimize (tableName) {
  dynamin.minimize(tableName)
  .then(table => {
    if (table) {
      conf.set(table.name, table)
    }

    console.log([
      `${chalk.underline.yellow('Tables that have been minimized:')}`,
      `  ${tableName}`
    ].join('\n'))
  })
  .catch(err => {
    console.error(chalk.red(err))
  })
}

function minimizeByTags (tags) {
  const spinner = ora('Minimizing...').start()

  dynamin.listByTags(tags)
  .then(tableNames => {
    const promise = tableNames.reduce((prev, name) => {
      return prev
      .then(() => dynamin.minimize(name))
      .then(table => {
        if (table) {
          conf.set(table.name, table)
        }
      })
    }, Promise.resolve())

    return promise.then(() => tableNames)
  })
  .then(tableNames => {
    const msg = tableNames.map(t => `  ${t}`)
    msg.unshift(`${chalk.underline.yellow('Tables that have been minimized:')}`)
    spinner.stop()
    console.log(msg.join('\n'))
  })
  .catch(err => {
    spinner.stop()
    console.error(chalk.red(err))
  })
}

function restore () {
  const spinner = ora('Restoring...').start()

  const tables = Object.keys(conf.all).map(key => conf.all[key])
  const promise = tables.reduce((prev, table) => {
    return prev
    .then(() => dynamin.update(table))
    .catch(err => {
      if (err.code !== 'ValidationException') {
        throw err
      }
    })
  }, Promise.resolve())

  return promise.then(() => {
    conf.clear()
    spinner.stop()
    console.log(chalk.yellow('Completed'))
  })
  .catch(err => {
    spinner.stop()
    console.error(chalk.red(err))
  })
}

function main () {
  dynamin.AWS.config.update({region: argv.r})

  if (argv.p) {
    dynamin.AWS.config.credentials = new dynamin.AWS.SharedIniFileCredentials({profile: argv.p})
  }

  if (argv.t) {
    return minimize(argv.t)
  }

  if (argv.tags) {
    return minimizeByTags(argv.tags)
  }

  if (argv.restore) {
    return restore()
  }
}

main()
